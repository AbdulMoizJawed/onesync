import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { getStripe } from '@/lib/stripe'

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

function withCors(json: any, init?: ResponseInit) {
  const res = NextResponse.json(json, init)
  res.headers.set('Access-Control-Allow-Origin', '*')
  res.headers.set('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')
  res.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  res.headers.set('Access-Control-Allow-Credentials', 'true')
  return res
}

export async function OPTIONS() { return withCors({ ok: true }) }

export async function POST(request: NextRequest) {
  try {
    
    const supabase = createRouteHandlerClient({ 
      cookies: async () => await cookies()
    })
    const stripe = getStripe()

    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) return withCors({ error: 'Unauthorized' }, { status: 401 })

    const { mode } = await request.json().catch(() => ({ mode: 'onboarding' }))

    const { data: accountRec, error } = await supabase
      .from('stripe_accounts')
      .select('*')
      .eq('user_id', user.id)
      .single()

    if (error || !accountRec) return withCors({ error: 'No Stripe account found' }, { status: 404 })

    const { origin } = new URL(request.url)
    const refresh_url = `${origin}/api/stripe/onboarding-refresh`
    const return_url = `${origin}/api/stripe/onboarding-return`

    if (mode === 'management') {
      const accountSession = await stripe.accountSessions.create({
        account: accountRec.stripe_account_id,
        components: { account_management: { enabled: true } }
      })
      return withCors({ success: true, type: 'management', client_secret: accountSession.client_secret })
    }

    const link = await stripe.accountLinks.create({
      account: accountRec.stripe_account_id,
      refresh_url,
      return_url,
      type: 'account_onboarding',
    })

    return withCors({ success: true, type: 'onboarding', url: link.url })
  } catch (error: any) {
    const message = error?.message || 'Failed to generate onboarding link'
    return withCors({ error: message }, { status: 500 })
  }
}
