import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { getStripe } from '@/lib/stripe'

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

function withCors(json: any, init?: ResponseInit) {
  const res = NextResponse.json(json, init)
  res.headers.set('Access-Control-Allow-Origin', '*')
  res.headers.set('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')
  res.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  res.headers.set('Access-Control-Allow-Credentials', 'true')
  return res
}

export async function OPTIONS() {
  return withCors({ ok: true })
}

export async function POST(request: NextRequest) {
  try {
    
    const supabase = createRouteHandlerClient({ 
      cookies: async () => await cookies()
    })
    const stripe = getStripe()

    // Verify user authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return withCors({ error: 'Unauthorized' }, { status: 401 })
    }

    const { account, components } = await request.json()

    if (!account) {
      return NextResponse.json(
        { error: 'Account ID is required' },
        { status: 400 }
      )
    }

    // Verify the account belongs to the authenticated user
    const { data: accountRecord } = await supabase
      .from('stripe_accounts')
      .select('*')
      .eq('user_id', user.id)
      .eq('stripe_account_id', account)
      .single()

    if (!accountRecord) {
      return withCors({ error: 'Account not found or unauthorized' }, { status: 404 })
    }

    // Enhanced components configuration for Connect embedded components
    const defaultComponents = {
      account_onboarding: {
        enabled: true,
        features: {
          external_account_collection: true,
          disable_stripe_user_authentication: false
        }
      },
      payments: {
        enabled: true,
        features: {
          refund_management: true,
          dispute_management: true,
          capture_payments: true
        }
      },
      payouts: {
        enabled: true,
        features: {
          instant_payouts: true,
          standard_payouts: true,
          edit_payout_schedule: true,
          external_account_collection: true
        }
      },
      balances: {
        enabled: true,
        features: {
          deposits: true,
          withdrawals: true
        }
      },
      account_management: {
        enabled: true,
        features: {
          external_account_collection: true,
          disable_stripe_user_authentication: false
        }
      },
      notification_banner: {
        enabled: true,
        features: {
          external_account_collection: true
        }
      }
    }

    // Merge with provided components or use defaults
    const finalComponents = components || defaultComponents

    console.log('Creating account session for account:', account)
    console.log('Components config:', JSON.stringify(finalComponents, null, 2))

    const accountSession = await stripe.accountSessions.create({
      account: account,
      components: finalComponents
    })

    return withCors({
      success: true,
      accountSession: {
        client_secret: accountSession.client_secret,
        expires_at: accountSession.expires_at,
        account: accountSession.account,
        components: accountSession.components
      }
    })

  } catch (error: any) {
    console.error('Error creating account session:', error)
    
    return withCors(
      { 
        error: 'Failed to create account session',
        details: error.message
      },
      { status: 500 }
    )
  }
}
