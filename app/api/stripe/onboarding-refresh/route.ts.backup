import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { getStripe } from '@/lib/stripe'

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest) {
  try {
    
    const supabase = createRouteHandlerClient({ 
      cookies: async () => await cookies()
    })
    const stripe = getStripe()
    
    const { searchParams } = new URL(request.url)
    const accountId = searchParams.get('account_id')
    
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      // Redirect to login page
      return NextResponse.redirect(new URL('/auth/login?redirect=/payments', request.url))
    }

    if (!accountId) {
      // Redirect to payments page if no account ID
      return NextResponse.redirect(new URL('/payments?error=missing_account', request.url))
    }

    try {
      // Verify the account belongs to the user
      const { data: accountRec } = await supabase
        .from('stripe_accounts')
        .select('*')
        .eq('user_id', user.id)
        .eq('stripe_account_id', accountId)
        .single()

      if (!accountRec) {
        return NextResponse.redirect(new URL('/payments?error=unauthorized', request.url))
      }

      // Create a new account link for onboarding refresh
      const { origin } = new URL(request.url)
      const accountLink = await stripe.accountLinks.create({
        account: accountId,
        refresh_url: `${origin}/api/stripe/onboarding-refresh?account_id=${accountId}`,
        return_url: `${origin}/api/stripe/onboarding-return?account_id=${accountId}`,
        type: 'account_onboarding',
      })
      
      // Redirect to the new account link URL
      return NextResponse.redirect(accountLink.url)
    } catch (error) {
      console.error('Error refreshing account link:', error)
      
      // Redirect to payments page with error
      const errorUrl = new URL('/payments', request.url)
      errorUrl.searchParams.set('error', 'refresh_failed')
      
      return NextResponse.redirect(errorUrl)
    }
  } catch (error) {
    console.error('Error in onboarding refresh:', error)
    
    // Redirect to error page
    const errorUrl = new URL('/error', request.url)
    errorUrl.searchParams.set('message', 'Account link refresh failed')
    
    return NextResponse.redirect(errorUrl)
  }
}
