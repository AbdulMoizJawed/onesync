import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { getStripe } from '@/lib/stripe'

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

function withCors(json: any, init?: ResponseInit) {
  const res = NextResponse.json(json, init)
  res.headers.set('Access-Control-Allow-Origin', '*')
  res.headers.set('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')
  res.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  res.headers.set('Access-Control-Allow-Credentials', 'true')
  return res
}

export async function OPTIONS() {
  return withCors({ ok: true })
}

export async function POST(request: NextRequest) {
  try {
    
    const supabase = createRouteHandlerClient({ 
      cookies: async () => await cookies()
    })
    const stripe = getStripe()

    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return withCors({ error: 'Unauthorized' }, { status: 401 })
    }

    const { accountId, interval, monthlyAnchor, weeklyAnchor } = await request.json()
    
    if (!accountId || !interval) {
      return withCors({ error: 'Account ID and interval are required' }, { status: 400 })
    }

    // Validate interval
    if (!['daily', 'weekly', 'monthly'].includes(interval)) {
      return withCors({ error: 'Invalid interval. Must be daily, weekly, or monthly' }, { status: 400 })
    }

    // Verify user owns this account
    const { data: accountRec, error } = await supabase
      .from('stripe_accounts')
      .select('*')
      .eq('user_id', user.id)
      .eq('stripe_account_id', accountId)
      .single()

    if (error || !accountRec) {
      return withCors({ error: 'Account not found or unauthorized' }, { status: 404 })
    }

    // Prepare update parameters
    const updateParams: any = {
      settings: {
        payouts: {
          schedule: {
            interval: interval
          }
        }
      }
    }

    // Add appropriate anchor based on interval
    if (interval === 'monthly' && monthlyAnchor) {
      if (monthlyAnchor < 1 || monthlyAnchor > 31) {
        return withCors({ error: 'Monthly anchor must be between 1 and 31' }, { status: 400 })
      }
      updateParams.settings.payouts.schedule.monthly_anchor = monthlyAnchor
    } else if (interval === 'weekly' && weeklyAnchor) {
      if (!['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].includes(weeklyAnchor)) {
        return withCors({ error: 'Invalid weekly anchor day' }, { status: 400 })
      }
      updateParams.settings.payouts.schedule.weekly_anchor = weeklyAnchor
    }

    // Update the account payout settings
    await stripe.accounts.update(accountId, updateParams)

    // Update your database with the new settings
    await supabase
      .from('stripe_accounts')
      .update({
        payout_schedule_interval: interval,
        payout_schedule_anchor: interval === 'monthly' ? monthlyAnchor : weeklyAnchor,
        updated_at: new Date().toISOString()
      })
      .eq('stripe_account_id', accountId)

    return withCors({ 
      success: true,
      settings: {
        interval,
        anchor: interval === 'monthly' ? monthlyAnchor : weeklyAnchor
      }
    })
  } catch (error: any) {
    console.error('Error updating payout settings:', error)
    const message = error?.message || 'Failed to update payout settings'
    return withCors({ error: message }, { status: 500 })
  }
}
