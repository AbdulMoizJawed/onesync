"use client"

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Breadcrumbs } from '@/components/ui/breadcrumbs'
import { supabase } from '@/lib/supabase'
import { 
  Users, 
  Music, 
  Database,
  ExternalLink,
  BarChart3,
  Lock,
  AlertCircle,
  Bell,
  Send,
  Activity,
  DollarSign,
  MessageSquare,
  Zap,
  TrendingUp,
  Eye
} from 'lucide-react'
import { useAuth } from '@/lib/auth'
import { useRouter } from 'next/navigation'
import { toast } from 'react-hot-toast'

interface AdminStats {
  totalUsers: number
  totalReleases: number
  totalNotifications: number
  unreadNotifications: number
  totalRevenue: number
  activeUploads: number
  timestamp: string
}

interface NotificationForm {
  user_id: string
  title: string
  message: string
  type: 'release' | 'payout' | 'system' | 'promotion' | 'warning'
}

interface User {
  id: string
  email: string
  full_name?: string
  created_at: string
}

export default function AdminDashboard() {
  const { user, loading: authLoading, signOut } = useAuth()
  const router = useRouter()
  const [stats, setStats] = useState<AdminStats | null>(null)
  const [users, setUsers] = useState<User[]>([])
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState<'overview' | 'notifications' | 'users' | 'analytics' | 'takedowns' | 'payouts' | 'reviews'>('overview')
  const [notificationForm, setNotificationForm] = useState<NotificationForm>({
    user_id: '',
    title: '',
    message: '',
    type: 'system'
  })
  const [sendingNotification, setSendingNotification] = useState(false)
  
  // New admin state
  const [takedownRequests, setTakedownRequests] = useState([])
  const [payoutRequests, setPayoutRequests] = useState([])
  const [contentReviews, setContentReviews] = useState([])
  const [adminLoading, setAdminLoading] = useState(false)

  // Breadcrumb items based on active tab
  const getBreadcrumbItems = () => {
    const baseItems = [
      { label: 'Admin', href: '/admin' }
    ]
    
    switch (activeTab) {
      case 'overview':
        return [...baseItems, { label: 'Overview', active: true }]
      case 'notifications':
        return [...baseItems, { label: 'Notifications', active: true }]
      case 'users':
        return [...baseItems, { label: 'Users', active: true }]
      case 'analytics':
        return [...baseItems, { label: 'Analytics', active: true }]
      default:
        return [...baseItems, { label: 'Overview', active: true }]
    }
  }

  // Check if user is authenticated and has admin access
  useEffect(() => {
    if (!authLoading) {
      if (!user) {
        router.push('/auth/login?redirect=/admin')
        return
      }
    }
  }, [user, authLoading, router])

  useEffect(() => {
    if (user) {
      fetchStats()
      fetchUsers()
    }
  }, [user])

  const fetchStats = async () => {
    try {
      setLoading(true)
      
      if (!supabase) {
        console.error('Supabase client not available')
        toast.error('Database connection not available')
        return
      }
      
      const { data: { session }, error: sessionError } = await supabase.auth.getSession()
      
      if (sessionError) {
        console.error('Session error:', sessionError)
        toast.error('Authentication error')
        return
      }
      
      const token = session?.access_token
      
      if (!token) {
        console.error('No access token available')
        router.push('/auth/login?redirect=/admin')
        return
      }
      
      const response = await fetch('/api/admin/stats', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        
        setStats({
          ...data,
          totalNotifications: 45,
          unreadNotifications: 12,
          totalRevenue: 15420.50,
          activeUploads: 23
        })
        toast.success('Stats loaded successfully')
      } else {
        const errorData = await response.text()
        console.error('Stats API error:', response.status, errorData)
        
        if (response.status === 401) {
          router.push('/auth/login?redirect=/admin')
        } else {
          toast.error(`Failed to load stats: ${response.status}`)
        }
      }
    } catch (error) {
      console.error('Error fetching stats:', error)
      toast.error('Network error while fetching stats')
    } finally {
      setLoading(false)
    }
  }

  const fetchUsers = async () => {
    try {
      if (!supabase) {
        console.error('Supabase client not available')
        toast.error('Database connection not available')
        return
      }
      
      const { data, error } = await supabase
        .from('profiles')
        .select('id, email, full_name, created_at')
        .order('created_at', { ascending: false })
        .limit(50)
        
      if (error) {
        console.error('Error fetching users:', error)
        toast.error('Failed to load users')
      } else {
        setUsers(data || [])
        console.log('Users loaded:', data?.length || 0)
      }
    } catch (error) {
      console.error('Error fetching users:', error)
      toast.error('Network error while fetching users')
    }
  }

  const sendNotification = async () => {
    if (!notificationForm.user_id || !notificationForm.title || !notificationForm.message) {
      toast.error('Please fill in all required fields')
      return
    }

    setSendingNotification(true)
    
    try {
      console.log('Sending notification:', notificationForm)
      
      const response = await fetch('/api/notifications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(notificationForm)
      })

      const responseData = await response.text()
      console.log('Notification response:', response.status, responseData)

      if (response.ok) {
        toast.success('Notification sent successfully!')
        setNotificationForm({
          user_id: '',
          title: '',
          message: '',
          type: 'system'
        })
        fetchStats()
      } else {
        console.error('Failed to send notification:', response.status, responseData)
        toast.error(`Failed to send notification: ${response.status}`)
      }
    } catch (error) {
      console.error('Error sending notification:', error)
      toast.error('Network error while sending notification')
    } finally {
      setSendingNotification(false)
    }
  }

  const sendBroadcastNotification = async () => {
    if (!notificationForm.title || !notificationForm.message) {
      toast.error('Please fill in title and message')
      return
    }

    setSendingNotification(true)
    
    try {
      const promises = users.map(user => 
        fetch('/api/notifications', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            ...notificationForm,
            user_id: user.id
          })
        })
      )

      await Promise.all(promises)
      toast.success(`Broadcast notification sent to ${users.length} users!`)
      setNotificationForm({
        user_id: '',
        title: '',
        message: '',
        type: 'system'
      })
      fetchStats()
    } catch (error) {
      console.error('Error sending broadcast notification:', error)
      toast.error('Failed to send broadcast notification')
    } finally {
      setSendingNotification(false)
    }
  }

  const handleSignOut = async () => {
    await signOut()
    router.push('/')
  }

  const openSupawald = () => {
    window.open('http://localhost:3000', '_blank')
  }

  // Show loading while checking authentication
  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="flex items-center space-x-2">
          <Lock className="h-4 w-4 animate-pulse" />
          <span>Checking authentication...</span>
        </div>
      </div>
    )
  }

  // Show access denied if not authenticated
  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-96">
          <CardContent className="p-6 text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">Access Denied</h3>
            <p className="text-gray-600 mb-4">You need to be logged in to access the admin dashboard.</p>
            <Button onClick={() => router.push('/auth/login?redirect=/admin')} className="button-admin-primary">
              Go to Login
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Breadcrumbs */}
        <div className="mb-4">
          <Breadcrumbs items={getBreadcrumbItems()} />
        </div>

        {/* Header */}
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
            <p className="text-gray-600 mt-2">Manage your music distribution platform</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="text-sm text-gray-600">
              Welcome, {user.email}
            </div>
            <Button variant="outline" onClick={handleSignOut} className="button-admin-outline">
              Sign Out
            </Button>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex space-x-1 mb-8 p-2 bg-white rounded-lg shadow-sm border border-gray-200">
          {[
            { id: 'overview', label: 'Overview', icon: BarChart3 },
            { id: 'notifications', label: 'Notifications', icon: Bell },
            { id: 'users', label: 'Users', icon: Users },
            { id: 'takedowns', label: 'Takedowns', icon: AlertCircle },
            { id: 'payouts', label: 'Payouts', icon: DollarSign },
            { id: 'reviews', label: 'Reviews', icon: Eye },
            { id: 'analytics', label: 'Analytics', icon: TrendingUp }
          ].map((tab) => (
            <Button
              key={tab.id}
              variant={activeTab === tab.id ? "default" : "ghost"}
              onClick={() => setActiveTab(tab.id as typeof activeTab)}
              className={`flex items-center space-x-2 ${activeTab === tab.id ? 'button-admin-primary' : 'button-admin-ghost'}`}
            >
              <tab.icon className="h-4 w-4" />
              <span>{tab.label}</span>
            </Button>
          ))}
        </div>

        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Quick Stats */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Users</CardTitle>
                  <Users className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {loading ? '...' : stats?.totalUsers || 0}
                  </div>
                  <p className="text-xs text-muted-foreground">Registered artists</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Releases</CardTitle>
                  <Music className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {loading ? '...' : stats?.totalReleases || 0}
                  </div>
                  <p className="text-xs text-muted-foreground">All time</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Revenue</CardTitle>
                  <DollarSign className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    ${loading ? '...' : stats?.totalRevenue.toLocaleString() || 0}
                  </div>
                  <p className="text-xs text-muted-foreground">Total earnings</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Notifications</CardTitle>
                  <Bell className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {loading ? '...' : stats?.totalNotifications || 0}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    {stats?.unreadNotifications || 0} unread
                  </p>
                </CardContent>
              </Card>
            </div>

            {/* Admin Tools */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* File Management */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Database className="h-5 w-5" />
                    <span>File Management</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-gray-600">
                    Manage files, images, and content using Supawald.
                  </p>
                  <Button onClick={openSupawald} className="button-admin-primary w-full">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Open Supawald Admin
                  </Button>
                </CardContent>
              </Card>

              {/* Quick Actions */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Zap className="h-5 w-5" />
                    <span>Quick Actions</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <Button variant="outline" size="sm" onClick={() => setActiveTab('notifications')} className="button-admin-outline">
                      <Bell className="h-4 w-4 mr-2" />
                      Send Notification
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => setActiveTab('users')} className="button-admin-outline">
                      <Users className="h-4 w-4 mr-2" />
                      Manage Users
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => router.push('/notifications')} className="button-admin-outline">
                      <Eye className="h-4 w-4 mr-2" />
                      View Notifications
                    </Button>
                    <Button variant="outline" size="sm" onClick={fetchStats} className="button-admin-outline">
                      <Activity className="h-4 w-4 mr-2" />
                      Refresh Data
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Notifications Tab */}
        {activeTab === 'notifications' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Send Individual Notification */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Send className="h-5 w-5" />
                    <span>Send Notification</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="text-sm font-medium">User</label>
                    <Select value={notificationForm.user_id} onValueChange={(value) => 
                      setNotificationForm(prev => ({ ...prev, user_id: value }))
                    }>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a user" />
                      </SelectTrigger>
                      <SelectContent>
                        {users.map(user => (
                          <SelectItem key={user.id} value={user.id}>
                            {user.full_name || user.email}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium">Type</label>
                    <Select value={notificationForm.type} onValueChange={(value: NotificationForm['type']) => 
                      setNotificationForm(prev => ({ ...prev, type: value }))
                    }>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="system">System</SelectItem>
                        <SelectItem value="release">Release</SelectItem>
                        <SelectItem value="payout">Payout</SelectItem>
                        <SelectItem value="promotion">Promotion</SelectItem>
                        <SelectItem value="warning">Warning</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium">Title</label>
                    <Input
                      value={notificationForm.title}
                      onChange={(e) => setNotificationForm(prev => ({ ...prev, title: e.target.value }))}
                      placeholder="Notification title"
                    />
                  </div>

                  <div>
                    <label className="text-sm font-medium">Message</label>
                    <Textarea
                      value={notificationForm.message}
                      onChange={(e) => setNotificationForm(prev => ({ ...prev, message: e.target.value }))}
                      placeholder="Notification message"
                      rows={3}
                    />
                  </div>

                  <Button 
                    onClick={sendNotification} 
                    disabled={sendingNotification}
                    className="button-admin-primary w-full"
                  >
                    {sendingNotification ? 'Sending...' : 'Send Notification'}
                  </Button>
                </CardContent>
              </Card>

              {/* Broadcast Notification */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <MessageSquare className="h-5 w-5" />
                    <span>Broadcast to All Users</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-gray-600">
                    Send a notification to all {users.length} registered users.
                  </p>
                  
                  <div>
                    <label className="text-sm font-medium">Type</label>
                    <Select value={notificationForm.type} onValueChange={(value: NotificationForm['type']) => 
                      setNotificationForm(prev => ({ ...prev, type: value }))
                    }>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="system">System</SelectItem>
                        <SelectItem value="promotion">Promotion</SelectItem>
                        <SelectItem value="warning">Warning</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium">Title</label>
                    <Input
                      value={notificationForm.title}
                      onChange={(e) => setNotificationForm(prev => ({ ...prev, title: e.target.value }))}
                      placeholder="Broadcast title"
                    />
                  </div>

                  <div>
                    <label className="text-sm font-medium">Message</label>
                    <Textarea
                      value={notificationForm.message}
                      onChange={(e) => setNotificationForm(prev => ({ ...prev, message: e.target.value }))}
                      placeholder="Broadcast message"
                      rows={3}
                    />
                  </div>

                  <Button 
                    onClick={sendBroadcastNotification} 
                    disabled={sendingNotification}
                    className="w-full button-admin-destructive"
                    variant="destructive"
                  >
                    {sendingNotification ? 'Broadcasting...' : `Broadcast to ${users.length} Users`}
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Users Tab */}
        {activeTab === 'users' && (
          <div className="space-y-6">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                      <Users className="h-5 w-5" />
                      <span>User Management ({users.length} users)</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {users.map(user => (
                        <Card key={user.id} className="p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                                <Users className="w-5 h-5 text-gray-400" />
                              </div>
                              <div>
                                <h3 className="font-medium">{user.full_name || 'No name'}</h3>
                                <p className="text-sm text-gray-600">{user.email}</p>
                                <p className="text-xs text-gray-500">
                                  Joined {new Date(user.created_at).toLocaleDateString()}
                                </p>
                              </div>
                            </div>
                            <div className="text-right">
                              <Badge variant="secondary">
                                User
                              </Badge>
                            </div>
                          </div>
                        </Card>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        )
              <div className="space-y-6">
                {/* User Detail Header */}
                <Card>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <Button 
                        variant="outline" 
                        onClick={() => setSelectedUser(null)}
                        className="button-admin-outline"
                      >
                        ← Back to Users
                      </Button>
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                          onClick={() => {
                            setNotificationForm(prev => ({ ...prev, user_id: selectedUser.id }))
                            setActiveTab('notifications')
                          }}
                          className="button-admin-outline"
                        >
                          <Send className="w-4 h-4 mr-2" />
                          Send Notification
                        </Button>
                      </div>
                    </div>
                    
                    <div className="flex items-start space-x-6">
                      <div className="w-32 h-32 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden">
                        <Users className="w-16 h-16 text-gray-400" />
                      </div>
                      
                      <div className="flex-1">
                        <h1 className="text-3xl font-bold mb-2">{selectedUser.full_name || 'No name set'}</h1>
                        <p className="text-lg text-gray-600 mb-3">{selectedUser.email}</p>
                        
                        <div className="flex gap-4 mb-4">
                          <Badge variant="secondary">{userReleases.length} releases</Badge>
                          <Badge variant="outline">{userArtists.length} artists</Badge>
                          <Badge variant="outline">
                            ${userReleases.reduce((sum, r) => sum + (r.revenue || 0), 0).toFixed(2)} total revenue
                          </Badge>
                        </div>
                        
                        <div className="flex gap-6 text-sm text-gray-500">
                          <span>Joined {new Date(selectedUser.created_at).toLocaleDateString()}</span>
                          <span>{userReleases.reduce((sum, r) => sum + (r.streams || 0), 0)} total streams</span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* User's Artists */}
                {userArtists.length > 0 && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <Users className="h-5 w-5" />
                        <span>Artists ({userArtists.length})</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {userArtists.map(artist => (
                          <Card key={artist.id} className="hover:shadow-md transition-shadow">
                            <CardContent className="p-3">
                              <div className="flex items-center space-x-3">
                                <div className="w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center overflow-hidden">
                                  {artist.image ? (
                                    <Image 
                                      src={artist.image} 
                                      alt={artist.name}
                                      width={48}
                                      height={48}
                                      className="w-full h-full object-cover"
                                      unoptimized
                                    />
                                  ) : (
                                    <Users className="w-6 h-6 text-gray-400" />
                                  )}
                                </div>
                                <div className="flex-1 min-w-0">
                                  <h4 className="font-semibold truncate">{artist.name}</h4>
                                  <p className="text-sm text-gray-600 truncate">{artist.genre || 'Unknown Genre'}</p>
                                  {artist.location && (
                                    <p className="text-xs text-gray-500">📍 {artist.location}</p>
                                  )}
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* User's Releases */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Music className="h-5 w-5" />
                      <span>Releases ({userReleases.length})</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {userReleases.length > 0 ? (
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {userReleases.map(release => (
                          <Card key={release.id} className="hover:shadow-md transition-shadow">
                            <CardContent className="p-4">
                              <div className="flex items-start space-x-4">
                                <div className="w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center overflow-hidden relative group">
                                  {release.cover_art_url ? (
                                    <Image 
                                      src={release.cover_art_url} 
                                      alt={release.title}
                                      width={64}
                                      height={64}
                                      className="w-full h-full object-cover"
                                      unoptimized
                                    />
                                  ) : (
                                    <Music className="w-8 h-8 text-gray-400" />
                                  )}
                                  
                                  {release.audio_url && (
                                    <Button
                                      variant="ghost"
                                      size="icon"
                                      className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity text-white"
                                      onClick={() => handlePlayPause(release.id, release.audio_url)}
                                      disabled={audioLoading === release.id}
                                    >
                                      {audioLoading === release.id ? (
                                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                      ) : currentlyPlaying === release.id ? (
                                        <div className="w-4 h-4">⏸</div>
                                      ) : (
                                        <div className="w-4 h-4">▶</div>
                                      )}
                                    </Button>
                                  )}
                                </div>
                                
                                <div className="flex-1 min-w-0">
                                  <h4 className="font-semibold truncate">{release.title}</h4>
                                  <p className="text-sm text-gray-600 truncate">{release.artist_name}</p>
                                  <div className="flex items-center gap-2 mt-2">
                                    <Badge 
                                      variant={release.status === 'published' ? 'default' : 'secondary'}
                                      className="text-xs"
                                    >
                                      {release.status}
                                    </Badge>
                                    {release.genre && (
                                      <Badge variant="outline" className="text-xs">{release.genre}</Badge>
                                    )}
                                  </div>
                                  
                                  <div className="flex justify-between items-center mt-3 text-xs text-gray-500">
                                    <span>{release.streams || 0} streams</span>
                                    <span>${(release.revenue || 0).toFixed(2)}</span>
                                  </div>
                                  
                                  {release.release_date && (
                                    <p className="text-xs text-gray-500 mt-1">
                                      Released {new Date(release.release_date).toLocaleDateString()}
                                    </p>
                                  )}
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-gray-500">
                        <Music className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                        <p>No releases found for this user</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        )}

        {/* Analytics Tab */}
        {activeTab === 'analytics' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">System Status</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center space-x-2">
                    <Badge variant="default" className="bg-green-500">Online</Badge>
                  </div>
                  <p className="text-xs text-muted-foreground mt-2">All systems operational</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">Active Uploads</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats?.activeUploads || 0}</div>
                  <p className="text-xs text-muted-foreground">Files being processed</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">Last Updated</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-sm">
                    {stats?.timestamp ? new Date(stats.timestamp).toLocaleString() : 'Never'}
                  </div>
                  <Button variant="ghost" size="sm" onClick={fetchStats} className="mt-2 button-admin-ghost">
                    Refresh
                  </Button>
                </CardContent>
              </Card>
            </div>

            {/* Additional Analytics */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <BarChart3 className="h-5 w-5" />
                    <span>Platform Analytics</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Total Platform Revenue</span>
                      <span className="font-bold">${stats?.totalRevenue.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Active Users (30 days)</span>
                      <span className="font-bold">{Math.floor((stats?.totalUsers || 0) * 0.7)}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Average Releases per User</span>
                      <span className="font-bold">
                        {stats?.totalUsers && stats?.totalReleases 
                          ? (stats.totalReleases / stats.totalUsers).toFixed(1)
                          : '0'
                        }
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Activity className="h-5 w-5" />
                    <span>Recent Activity</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="text-sm">
                      <span className="text-gray-600">Latest user joined:</span>
                      <br />
                      <span className="font-medium">
                        {users.length > 0 ? new Date(users[0].created_at).toLocaleDateString() : 'No users yet'}
                      </span>
                    </div>
                    <div className="text-sm">
                      <span className="text-gray-600">Total notifications sent:</span>
                      <br />
                      <span className="font-medium">{stats?.totalNotifications || 0}</span>
                    </div>
                    <div className="text-sm">
                      <span className="text-gray-600">Active file uploads:</span>
                      <br />
                      <span className="font-medium">{stats?.activeUploads || 0} in progress</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Takedowns Tab */}
        {activeTab === 'takedowns' && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <AlertCircle className="h-5 w-5" />
                  <span>DMCA Takedown Requests</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <p className="text-gray-600">
                    Manage copyright takedown requests from rights holders.
                  </p>
                  <div className="flex items-center gap-4">
                    <Badge variant="secondary">Pending: 3</Badge>
                    <Badge variant="default">Under Review: 2</Badge>
                    <Badge variant="outline">Completed: 15</Badge>
                  </div>
                  <Button 
                    onClick={() => window.open('/takedown-request', '_blank')} 
                    variant="outline" 
                    className="button-admin-outline"
                  >
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Public Takedown Form
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Payouts Tab */}
        {activeTab === 'payouts' && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <DollarSign className="h-5 w-5" />
                  <span>Payout Requests</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <p className="text-gray-600">
                    Manage artist payout requests and payment processing.
                  </p>
                  <div className="flex items-center gap-4">
                    <Badge variant="secondary">Pending: $1,250.00</Badge>
                    <Badge variant="default">Processing: $850.00</Badge>
                    <Badge variant="outline">Completed: $12,400.00</Badge>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Button variant="outline" className="button-admin-outline">
                      <Eye className="h-4 w-4 mr-2" />
                      Review Pending
                    </Button>
                    <Button variant="outline" className="button-admin-outline">
                      <DollarSign className="h-4 w-4 mr-2" />
                      Process Batch
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Reviews Tab */}
        {activeTab === 'reviews' && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Eye className="h-5 w-5" />
                  <span>Content Reviews</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <p className="text-gray-600">
                    Review and moderate user-uploaded content for policy compliance.
                  </p>
                  <div className="flex items-center gap-4">
                    <Badge variant="secondary">Pending Review: 8</Badge>
                    <Badge variant="destructive">Flagged: 2</Badge>
                    <Badge variant="default">Approved Today: 15</Badge>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Button variant="outline" className="button-admin-outline">
                      <Eye className="h-4 w-4 mr-2" />
                      Review Queue
                    </Button>
                    <Button variant="outline" className="button-admin-outline">
                      <AlertCircle className="h-4 w-4 mr-2" />
                      Flagged Content
                    </Button>
                    <Button variant="outline" className="button-admin-outline">
                      <Activity className="h-4 w-4 mr-2" />
                      Review History
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  )
}