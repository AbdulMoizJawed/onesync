// Backup of original middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { createClient } from '@/lib/supabase/middleware'

export async function middleware(request: NextRequest) {
  const { supabase, response } = await createClient(request)

  // Refresh session if expired - required for Server Components
  // https://supabase.com/docs/guides/auth/auth-helpers/nextjs#managing-session-with-middleware
  await supabase.auth.getSession()

  const {
    data: { session },
  } = await supabase.auth.getSession()

  const { pathname } = request.nextUrl

  // Define protected routes that require authentication
  const protectedRoutes = [
    '/admin',
    '/releases',
    '/analytics',
    '/settings',
    '/profile',
    '/upload',
    '/payments',
    '/earnings',
    '/support',
  ]

  // Define admin-only routes
  const adminRoutes = ['/admin']
  
  const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route))
  const isAdminRoute = adminRoutes.some(route => pathname.startsWith(route))

  // Enhanced session detection with debugging
  console.log('üîç Session check for route:', pathname, {
    hasSession: !!session,
    userEmail: session?.user?.email,
    userId: session?.user?.id,
    isProtectedRoute,
    isAdminRoute
  })

  // If user is not logged in and trying to access a protected route, redirect to login
  if (!session && isProtectedRoute) {
    console.log('‚ùå No session found for protected route, redirecting to login')
    const url = request.nextUrl.clone()
    url.pathname = '/auth/login'
    url.searchParams.set('redirectedFrom', pathname)
    return NextResponse.redirect(url)
  }

  // Check admin access for admin routes
  if (session && isAdminRoute) {
    const userEmail = session.user?.email || ''
    
    // Simple admin check - @onesync.music domain or specific emails
    const isAdmin = userEmail.endsWith('@onesync.music') || 
                   userEmail === 'info@onesync.music' || 
                   userEmail === 'support@onesync.music'
    
    console.log('üîê Admin check result:', {
      userEmail,
      isAdmin,
      endsWithDomain: userEmail.endsWith('@onesync.music'),
      isInfoEmail: userEmail === 'info@onesync.music',
      isSupportEmail: userEmail === 'support@onesync.music'
    })
    
    if (!isAdmin) {
      console.log('‚ùå Access denied, redirecting to releases')
      // User is not an admin, redirect to releases page with error
      const url = request.nextUrl.clone()
      url.pathname = '/releases'
      url.searchParams.set('error', 'unauthorized')
      url.searchParams.set('message', `Admin access required. Only @onesync.music emails are allowed. Your email: ${userEmail}`)
      return NextResponse.redirect(url)
    }
    
    console.log('‚úÖ Admin access granted')
    // User is admin, allow access
    return response
  }

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
